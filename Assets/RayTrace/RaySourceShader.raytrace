#include "UnityShaderVariables.cginc"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "RayCommon.raytrace"

#pragma max_recursion_depth 1

// Input
RaytracingAccelerationStructure g_SceneAccelStruct;
Texture2D<float4> g_Albedo;
Texture2D<float4> g_Normal;
Texture2D<float4> g_Depths;
Texture2D<float4> g_Motion;
float g_Zoom; //Mathf.Tan(Mathf.Deg2Rad * Camera.main.fieldOfView * 0.5f)

// Output
RWTexture2D<float4> g_Output : register(u0);

float4 SampleEnvironmentMap(float3 direction)
{
    float3 toLightDir = normalize(_WorldSpaceLightPos0.xyz);
    float3 color = dot(direction, toLightDir) > 0.95 ? 1.0 : 0.0;
    return float4(color, 1.0);
}

[shader("miss")]
void MainMissShader(inout RayPayload payload)
{
    float3 rayDirW = normalize(WorldRayDirection());
    float3 rayOriginW = WorldRayOrigin();

    payload.worldPosition = rayDirW * 1000.0f;
    payload.color = SampleEnvironmentMap(rayDirW);
    payload.normal = 0.0;
}

[shader("raygeneration")]
void MainRayGenShader()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;
    uint xorBitValue = (launchIndex.x ^ launchIndex.y) & 0x000000FF;
    float normalizedXorValue = (float) xorBitValue / 255.0f;

    float2 frameCoord = float2(launchIndex.x, launchDim.y - launchIndex.y - 1) + float2(0.5, 0.5);

    float2 uvCoords = frameCoord / float2(launchDim.x - 1, launchDim.y - 1);
    float3 worldPosition = ComputeWorldSpacePosition(uvCoords, g_Depths[frameCoord].r, Inverse(UNITY_MATRIX_VP));
    float3 worldNormal = normalize(g_Normal[frameCoord].xyz);

    float2 ndcCoords = uvCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    float aspectRatio = (float)launchDim.x / (float)launchDim.y;

    float3 viewDirection = normalize(float3(ndcCoords.x * aspectRatio, ndcCoords.y, 1));

    // Rotate the ray from view space to world space.
    float3 toCameraDir = -normalize(mul((float3x3)unity_CameraToWorld, viewDirection));
    float3 toLightDir = normalize(_WorldSpaceLightPos0.xyz);

    // Emperically decided for the scene
    float3 adjustedWorldPosition = worldPosition + worldNormal * 1e-2;

    float3 accumulatedColor = g_Albedo[frameCoord];

    // Todo: Replace with proper environment map
    if (length(accumulatedColor.xyz) < 1e-6)
        accumulatedColor = SampleEnvironmentMap(-toCameraDir);

    RayDesc ray;
    RayPayload payload;
    uint missShaderIndex = 0;

    payload.worldPosition = adjustedWorldPosition;
    payload.normal = worldNormal;

    float3 incidentVector = normalize(reflect(-toCameraDir, payload.normal));
    for (uint i = 0; i < 5 && length(payload.normal) > 1e-6; i++)
    {
        float3 bounceWorldPosition = payload.worldPosition;
        float3 bounceWorldNormal = payload.normal;

        ray.Origin    = bounceWorldPosition + bounceWorldNormal * 1e-4;
        ray.Direction = toLightDir;
        ray.TMin      = 0.0f;
        ray.TMax      = 1000.0f;

        // Shadow ray
        TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

        float weightShadow = max(dot(toLightDir, bounceWorldNormal), 1e-4);
        float weightReflect = max(dot(incidentVector, bounceWorldNormal), 1e-4);
        float weightSum = weightShadow + weightReflect;

        accumulatedColor += accumulatedColor * payload.color.xyz * weightShadow / weightSum;

        ray.Origin    = bounceWorldPosition + incidentVector * 1e-4;
        ray.Direction = incidentVector;
        ray.TMin      = 0.0f;
        ray.TMax      = 1000.0f;

        // Reflection ray
        TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);

        accumulatedColor += accumulatedColor * payload.color.xyz * weightReflect / weightSum;

        // v_out = reflect(v_in, v_norm);
        incidentVector = reflect(incidentVector, payload.normal);
    }

    g_Output[frameCoord] = float4(accumulatedColor, 1.0);
}