#include "UnityShaderVariables.cginc"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "RayCommon.raytrace"

#pragma max_recursion_depth 1

// Input
RaytracingAccelerationStructure g_SceneAccelStruct;
Texture2D<float4> g_Albedo;
Texture2D<float4> g_Normal;
Texture2D<float4> g_Depths;
Texture2D<float4> g_Motion;
float g_Zoom; //Mathf.Tan(Mathf.Deg2Rad * Camera.main.fieldOfView * 0.5f)

// Output
RWTexture2D<float4> g_Output : register(u0);

[shader("miss")]
void MainMissShader(inout RayPayload payload : SV_RayPayload)
{
    float3 rayDirW = WorldRayDirection();
    float3 rayOriginW = WorldRayOrigin();
    payload.worldPos = rayOriginW + rayDirW * 1000.0f;
    payload.worldPos *= -1.0f;

    payload.color = float4(1, 1, 1, 1);
}

[shader("raygeneration")]
void MainRayGenShader()
{
    uint2 launchIndex = DispatchRaysIndex().xy;
    uint2 launchDim = DispatchRaysDimensions().xy;
    uint xorBitValue = (launchIndex.x ^ launchIndex.y) & 0x000000FF;
    float normalizedXorValue = (float) xorBitValue / 255.0f;

    float2 frameCoord = float2(launchIndex.x, launchDim.y - launchIndex.y - 1) + float2(0.5, 0.5);

    float2 ndcCoords = frameCoord / float2(launchDim.x - 1, launchDim.y - 1);
    float depth = g_Depths[frameCoord].r;
    float3 worldPosition = ComputeWorldSpacePosition(ndcCoords.xy, depth, Inverse(UNITY_MATRIX_VP));
    float3 worldNormal = normalize(g_Normal[frameCoord].xyz);

    ndcCoords = ndcCoords * 2 - float2(1, 1);
    ndcCoords = ndcCoords * g_Zoom;

    float aspectRatio = (float)launchDim.x / (float)launchDim.y;

    float3 viewDirection = normalize(float3(ndcCoords.x * aspectRatio, ndcCoords.y, 1));

    // Rotate the ray from view space to world space.
    float3 toCameraDir = -normalize(mul((float3x3)unity_CameraToWorld, viewDirection));
    float3 toLightDir = normalize(_WorldSpaceLightPos0);

    RayDesc ray;
    RayPayload payload;
    uint missShaderIndex = 0;

    bool accurateWorldPositions = false;
    if (!accurateWorldPositions) {
        ray.Origin    = _WorldSpaceCameraPos;
        ray.Direction = -toCameraDir;
        ray.TMin      = 0.0f;
        ray.TMax      = 1000.0f;

        TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);
        worldPosition = payload.worldPos;
    }

    float lightFactor = dot(worldNormal, toLightDir);

    ray.Origin    = worldPosition + toLightDir * 1e-6;
    ray.Direction = toLightDir;
    ray.TMin      = 0.0f;
    ray.TMax      = 1000.0f;

    TraceRay(g_SceneAccelStruct, 0, 0xFF, 0, 1, missShaderIndex, ray, payload);
    lightFactor *= payload.color.r;


    g_Output[frameCoord] = g_Albedo[frameCoord] * max(lightFactor, 0.1);
}